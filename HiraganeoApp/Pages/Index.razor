@page "/"

@using HiraganeoCore;

<div>
    <h3>How Hiraganeo works?</h3>
    Hiraganeo generates 250 syllabels in romaji from selected options. Generated text doesn't make sense byt let's you practice writing hiragana without searching for words composed from syllabels you know (for example only from A/I/U/E/O and KA/KI/KU/KE/KO
</div>
<div>
    <h3>Select syllabels:</h3>
    <p>
        <div style="display: flex; width: 400px">
            @foreach (var part in (Hiraganeo.HiraganaParts[])Enum.GetValues(typeof(Hiraganeo.HiraganaParts)))
            {
                <MatCheckbox Value="@(Hiraganeo.EnabledSyllables[part])" TValue="bool" ValueChanged="(e) => ToggleHiraganaPart(part, e)">@part</MatCheckbox>}
            <br />
        </div>

        <MatButton Icon="check_box" Unelevated="true" @onclick="(e) => ToggleHiraganaParts(true)">Select all</MatButton>
        <MatButton Icon="check_box_outline_blank" Unelevated="true" @onclick="(e) => ToggleHiraganaParts(false)">Select none</MatButton>
    </p>
    <h3>Practice:</h3>
    <p>
        <MatButton Icon="favorite" Unelevated="true" @onclick="GetPracticeData">Practice</MatButton>
        <br />
        
        @if (@PracticeText != String.Empty)
        {
            <p>
                @PracticeText
            </p>

            @if (showHintText)
            {
                <p>
                    @((MarkupString)HintText)
                </p>
            }
            <MatButton Icon="help_outline" Unelevated="true" @onclick="(e) => showHintText = !showHintText">@(showHintText? "Hide hint" : "Show hint")</MatButton>
        }

    </p>
</div>

@code {

    private string practiceText = String.Empty;
    private string hintText = String.Empty;
    private bool showHintText = false;

    public string HintText
    {
        get { return hintText; }
        set
        {
            hintText = value;
            this.StateHasChanged();
        }
    }

    public string PracticeText
    {
        get { return practiceText; }
        set
        {
            practiceText = value;
            this.StateHasChanged();
        }
    }

    private void GetPracticeData(MouseEventArgs e)
    {
        (string, string) practiceText = Hiraganeo.GenerateTextWithHint(Hiraganeo.HiraganaBasic.Concat(Hiraganeo.HiraganaVoiced));
        PracticeText = practiceText.Item1;
        HintText = practiceText.Item2;
    }

    private void ToggleHiraganaPart(Hiraganeo.HiraganaParts part, bool value)
    {
        Hiraganeo.EnabledSyllables[part] ^= true;
    }

    private void ToggleHiraganaParts(bool value)
    {
        foreach (var part in (Hiraganeo.HiraganaParts[])Enum.GetValues(typeof(Hiraganeo.HiraganaParts)))
        {
            Hiraganeo.EnabledSyllables[part] = value;
        }
    }
}
