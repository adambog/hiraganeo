@page "/"

@using System.Text;

@using HiraganeoApp.Syllabaries;

<div>
    <div class="hiraganeo-box">
        <h3>How Hiraganeo works?</h3>
        <MatDivider></MatDivider>
        Hiraganeo generates 250 syllabels in romaji from selected options. Generated text doesn't make sense byt let's you practice writing hiragana without searching for words composed from syllabels you know (for example only from A/I/U/E/O and KA/KI/KU/KE/KO
    </div>
    <div class="hiraganeo-box">
        <h3>Select syllabels:</h3>
        <MatDivider></MatDivider>
        <div>
            @foreach (var part in (SyllabaryParts[])Enum.GetValues(typeof(SyllabaryParts)))
            {
                <MatCheckbox Value="@(selectedParts.GetValueOrDefault<SyllabaryParts,bool>(part))" TValue="bool" ValueChanged="(value) => ToggleSelectedPart(part, value)">@part</MatCheckbox>
            }
            <br />

            <MatRadioGroup @bind-Value="@SelectedSyllabary">                
                    <MatRadioButton Value="SyllabaryType.Hiragana">@SyllabaryType.Hiragana</MatRadioButton>
                    <MatRadioButton Value="SyllabaryType.Katakana">@SyllabaryType.Katakana</MatRadioButton>
            </MatRadioGroup>
        </div>

        <MatButton Icon="check_box" Unelevated="true" @onclick="(e) => ToggleSelectedParts(true)">Select all</MatButton>
        <MatButton Icon="check_box_outline_blank" Unelevated="true" @onclick="(e) => ToggleSelectedParts(false)">Select none</MatButton>
    </div>
    <div class="hiraganeo-box">
        <h3>Practice:</h3>
        <MatDivider></MatDivider>        
        <p>
            <MatButton Icon="favorite" Unelevated="true" OnClick="GeneratePracticeText" Style="margin-top: 10px;">Practice</MatButton>
            <br />
        
            @if (@PracticeText != String.Empty)
            {
                <p>
                    @PracticeText
                </p>

                @if (showHintText)
                {
                    <p>
                        @((MarkupString)HintText)
                    </p>
                }
                <MatButton Icon="help_outline" Unelevated="true" @onclick="(e) => showHintText = !showHintText">@(showHintText? "Hide hint" : "Show hint")</MatButton>
            }

        </p>
    </div>
</div>

@code {
    private Dictionary<SyllabaryParts, bool> selectedParts = new Dictionary<SyllabaryParts, bool>();
    private SyllabaryType selectedSyllabary = SyllabaryType.Hiragana;
    private string practiceText = String.Empty;
    private string hintText = String.Empty;
    private bool showHintText = false;

    public SyllabaryType SelectedSyllabary 
    {
        get { return selectedSyllabary; }
        set 
        { 
            var oldValue = selectedSyllabary;

            selectedSyllabary = value;

            if (oldValue != selectedSyllabary && practiceText != String.Empty) {
                GeneratePracticeText();
            }
        }
    }
        
    public string PracticeText
    {
        get { return practiceText; }
        set
        {
            practiceText = value;
            this.StateHasChanged();
        }
    }

    public string HintText
    {
        get { return hintText; }
        set
        {
            hintText = value;
            this.StateHasChanged();
        }
    }

    private void GeneratePracticeText()
    {        
        (PracticeText, HintText) = Generators.GeneratePracticeTextWithHint(selectedParts, selectedSyllabary);     
    }

    private void ToggleSelectedPart(SyllabaryParts part, bool value)
    {        
        if (selectedParts.ContainsKey(part)) {
            selectedParts[part] = value; 
        }
        else {
            selectedParts.Add(part, value);
        }
    }

    private void ToggleSelectedParts(bool value)
    {
        foreach (var part in (SyllabaryParts[])Enum.GetValues(typeof(SyllabaryParts))) {
            ToggleSelectedPart(part, value);
        }
    }
}
